<%  @new_id               = SecureRandom.uuid.to_s
	@new_frame_id         = "fetch_email_attachment_" + @project_email.id.to_s + "_" + @new_id 
	@new_feedback_id 	  = "fetch_email_attachment_feedback_" + @new_id %>
<div id="<%= @new_frame_id %>">
<fieldset><legend><%= l(:label_email_attachment_plural) %></legend>
<% if User.current.pref.fetchEmailAttachments_protocol.blank? %>
 <p><%= l(:label_user_email_not_configured) %></p>
<% else %>
<label class="icon icon-duplicate">
<%=link_to l(:label_fetch_attachments_from_email), "#",
			:remote => true,
			:onclick => "fetchJsForm('#{url_for(:controller => 'fetch_email_attachments', :action => 'fetch', :feedback_message_area => @new_feedback_id)}', this, addFile.nextAttachmentId );",
			:class => "icon icon-email" %> 
</label>
<% end %>
<% #-------- %>
<% if User.current.pref.fetchEmailAttachments_ticket_attachments.to_i != 0 
     
     issue_option_arr = []
     @project_email.project_email_designations.each do |project_email_designation|
     
     if project_email_designation.link_item.is_a?(Issue)
     
       issue = project_email_designation.link_item
     
       if issue.journals && issue.journals.any?
  
		 journalized_attachments = []
		 journal_option_arr = []
		 option_arr = []
		 
		 issue.journals.each_with_index do |journal, i|
		   journal_option_arr << "<option disabled value='none'>" + (i+1).to_s + ". " + (User.find_by_id(journal.user_id)).login.to_s + ": " + journal.created_on.strftime("%a, %d.%m.%y %X") + "</option>"
		   journal.details.each do |detail|
			 if (detail.property == 'attachment' and !detail.value.blank? and attachment = Attachment.find_by_id(detail.prop_key) )
					 journalized_attachments << attachment 
					 journal_option_arr << "<option value='" + attachment.id.to_s + "'>&nbsp;-&nbsp;" + attachment.filename + "</option>"
			 end #if 
		   end #do
		   option_arr << journal_option_arr
		   journal_option_arr = []
		 end #do
		 
		 if (User.current.pref[:comments_sorting] == "desc")
			option_arr.reverse!
		 end #if
		 
		 pure_issue_attachments = issue.attachments - journalized_attachments
		 
		 issue_option_arr << "<option disabled value='none'>" + "#{l(:label_issue)} #{issue.id}" + "</option>"
		 
		 pure_issue_attachments.each do |attachment|
		   issue_option_arr << ("<option value='" + attachment.id.to_s + "'>&nbsp;-&nbsp;" + attachment.filename + "</option>")
		 end #do
		 
		 issue_option_arr.concat(option_arr)

       end #if
     end #if
   end #do %>
<%- if @project_email.project_email_designations.any? %>
  <label class="icon icon-duplicate" for="attachment_id">
	<%= select_tag "issue_attachment_id", 
					issue_option_arr.join('').html_safe,
					:prompt => l(:label_select_issue_documents), 
					:onchange => "fetchJsForm('#{url_for(:controller => 'fetch_email_attachments', :action => 'reattach_named_attachment', :feedback_message_area => @new_feedback_id, :project_id => @project, :user_id => User.current.id.to_s)}', this, addFile.nextAttachmentId);" %>
  </label>
<%- end %>
<% #-------- %>
<% end #if protocol %>
<% #-------- %>
<% if User.current.pref.fetchEmailAttachments_project_documents.to_i != 0 %>
  <% if @project && @project.documents.any? %> 
	<label class="icon icon-duplicate" for="document_id">
	  <%= select_tag "document_id", 
					  options_from_collection_for_select(@project.documents, "id", "title"), 
					  :prompt => l(:label_select_project_documents), 
					  :onchange => "fetchJsForm('#{url_for(:controller => 'fetch_email_attachments', :action => 'reattach_project_documents', :feedback_message_area => @new_feedback_id, :project_id => @project, :user_id => User.current.id.to_s)}', this, addFile.nextAttachmentId);" %>
	</label>
  <% end %>
<% end %>
<a onclick = "<%= "$.ajax({url:'#{url_for(:controller => 'fetch_email_attachments', :action => 'reload_hook', :feedback_message_area => @new_feedback_id, :project_email_id => @project_email.id, :frame_id => @new_frame_id)}', type: 'post'})" %>", class = 'icon icon-reload'></a>
</fieldset>
<div id="<%= @new_feedback_id %>"></div>
</div>
<%= javascript_include_tag "fetchEmailAttachment", :plugin => "redmine_fetch_email_attachments" %>
